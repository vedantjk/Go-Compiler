type MESSAGE struct  {
   val int;
   next *MESSAGE;
};


func mod(val int, t int) int {
   
   var temp int;
   temp = val / t;
   return val - temp * t;
}

func power(x int, n int) int {
   var temp int;
   if(n == 0) {
      return 1;
   } else {
      if(mod(n, 2) == 1) {
         return x * power(x, n-1);
      } else {
         temp = power(x, n/2);
         return temp * temp;
      }
   }
}

func crypt( m int,  key int , msg *MESSAGE) {
   msg.val = mod(power(msg.val, key), m);
   if (msg.next != nil) {
      crypt(m, key, msg.next);
   }

}
func main() {
   var key, mod, length, readTemp, printTemp int;
   var start, current, temp *MESSAGE;
   start = new MESSAGE;
   current = start;

   scan key; 
   scan mod; 
   scan length; 


   length = length - 1;
   scan readTemp; 
   current.val = readTemp; 

   for (length > 0) {
      current.next = new MESSAGE;
      current = current.next;
      scan readTemp; 
      current.val = readTemp;
      length = length - 1;
   }
   current.next = nil;

   crypt(mod, key, start);
   current = start;
   for (current != nil) {
      temp = current;
      printTemp = current.val; 
      printf("%d\n",printTemp); 
      current = current.next;
      delete temp;
   }
}
